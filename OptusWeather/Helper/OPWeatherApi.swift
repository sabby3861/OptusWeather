//
//  OPWeatherApi.swift
//  OptusWeather
//
//  Created by techm on 30/07/19.
//  Copyright Â© 2019 techm. All rights reserved.
//

import UIKit
import CoreData

/**
 WeatherError generated by the Kit
 */
public enum OPWeatherError: Error {
    /// invalid data from api call
    case invalidData
}

/**
 All query output are wrapped into this Enum
 */
public enum Result<T> {
    /**
     Success Result
     - Parameter T: T can be Weather of Forecast struct
     */
    case success(T)
    /**
     Error case
     - Parameter Error?: error can be nil when error are unknown
     */
    case error(Error?)
}

protocol OPWeatherApiProtocol {
    var key: String {get}
    var endpoint: String {get}
    var version: String {get}
    var urlSession: URLSessionProtocol {get}
    var defaultParameters: [URLQueryItem] {get}
    
    func getEndpoint() -> String
}

 protocol OPWeatherApiWeatherProtocol {
    func getWeatherFor(cityId id: [String], completion: @escaping (Result<OPMultiWeatherInfo>) -> Void)
}

enum ReachabilityStatus {
    case unknown
    case disconnected
    case connected
}

/**
 Main class
 */
public class OPWeatherApi: OPWeatherApiProtocol {
    /// OpenWeatherMap key
    var key: String
    /// OpenWeatherMap endpoint
    var endpoint: String = "https://api.openweathermap.org/data"
    /// OpenWeatherMap version for API
    var version: String = "2.5"
    /// URLSession used for query
    var urlSession: URLSessionProtocol
    /// defaultParameters added to all query
    var defaultParameters: [URLQueryItem] = []
    /// Data Task
    private var task: URLSessionDataTask?
    // Reachability to check the internet
    private let reachabilityManager: NetworkReachabilityManager?
    private(set) var reachabilityStatus: ReachabilityStatus
    /**
     Init kit
     
     - Parameter key: OpenWeatherMap Key
     - Parameter urlSession: URLSession used for query
     */
    init(key: String, urlSession: URLSessionProtocol) {
        self.key = key
        self.urlSession = urlSession
        self.defaultParameters.append(URLQueryItem(name: "APPID", value: key))
        self.reachabilityManager = NetworkReachabilityManager()
        self.reachabilityStatus = .unknown
        
        beginListeningNetworkReachability()
    }
    
    deinit {
        reachabilityManager?.stopListening()
    }
    
    /*
    Reachability
    
    - Start the reachability
    */
    func beginListeningNetworkReachability() {
        reachabilityManager?.listener = { status in
            switch status {
            case .unknown: self.reachabilityStatus = .unknown
            case .notReachable:
                self.reachabilityStatus = .disconnected
                self.showErrorForNoNetwork()
            case .reachable(.ethernetOrWiFi), .reachable(.wwan): self.reachabilityStatus = .connected
            }
            
        }
        reachabilityManager?.startListening()
    }
    
    func showErrorForNoNetwork()  {
        task?.suspend()
        DispatchQueue.main.async {
            NotificationCenter.default.post(name: Notification.Name(rawValue: kNetworkReachabilityChanged), object: self)
            OPAlertViewController.showAlert(withTitle: "Error", message:  "No Network Connection, Please connect to the internet")
        }
    }
    
    /**
     Init kit
     
     - Parameter key: OpenWeatherMap Key
     */
    public convenience init(key: String) {
        self.init(key: key, urlSession: URLSession.shared)
    }
    
    /**
     - Returns: The full endpoint string with endpoint and version
     */
    func getEndpoint() -> String {
        return "\(endpoint)/\(version)/"
    }
    
    /**
     Add defaultParameter for all query
     */
    func addDefaultParameter(name: String, value: String) {
        defaultParameters.append(URLQueryItem(name: name, value: value))
    }
    
    /**
     Send request
     */
    private func send<T: Codable>(to endpoint: String, with parameters: [String], completion: @escaping (Result<T>) -> Void) {
        var urlComponents = URLComponents(string: "\(getEndpoint())\(endpoint)")!
        urlComponents.queryItems = defaultParameters
 
        let idParametr = parameters.joined(separator: ",")
        urlComponents.queryItems?.append(URLQueryItem(name: "id", value: (String(describing: idParametr))))
        task = urlSession.dataTask(with: urlComponents.url!) { data, response, error in
            guard let data = data else {
                completion(Result.error(OPWeatherError.invalidData))
                return
            }
            do {
                let decoder = JSONDecoder()
                let weather = try decoder.decode(T.self, from: data)
                completion(Result.success(weather))
            } catch let error {
                completion(Result.error(error))
            }
            }
        task?.resume()
    }
}


/**
 Extension for all weather endpoint
 */
extension OPWeatherApi: OPWeatherApiWeatherProtocol {
    /**
     Retrieve weather by OpenWeatherMap city ID
     
     - Parameter id:  internal ids as Array of OpenWeatherMap
     - Parameter completion: Result of api call
     - Remark: City id can be found : http://openweathermap.org/help/city_list.txt or in response result
     */
    func getWeatherFor(cityId id: [String], completion: @escaping (Result<OPMultiWeatherInfo>) -> Void) {
        send(to: "group", with: id, completion: completion)
    }
}

